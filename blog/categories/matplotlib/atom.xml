<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Matplotlib | 思考的轨迹]]></title>
  <link href="http://shanewfx.github.com/blog/categories/matplotlib/atom.xml" rel="self"/>
  <link href="http://shanewfx.github.com/"/>
  <updated>2013-08-16T09:11:33+08:00</updated>
  <id>http://shanewfx.github.com/</id>
  <author>
    <name><![CDATA[Shane]]></name>
    <email><![CDATA[shanewfx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Python图形化分析大Log文件]]></title>
    <link href="http://shanewfx.github.com/blog/2012/09/03/analyze-log-file-based-on-python/"/>
    <updated>2012-09-03T14:14:00+08:00</updated>
    <id>http://shanewfx.github.com/blog/2012/09/03/analyze-log-file-based-on-python</id>
    <content type="html"><![CDATA[<p>最近因为项目需要经常分析数据量很大的Log文件，以往靠手工目测的分析方法已不太可能快速分析和定位问题。</p>

<p>由于和我一起做这个项目的同事，会使用Python，编写的Python脚本能够将Log中的相关数据以图形的方式显示出来，这样就便于我们快速检测出是否输入、输出有异常情况发生。
这样，也就加快了解决问题的效率。</p>

<p>为此，在这里简要记录一下具体的方法，以便以后在需要的时候能够做参考。</p>

<!--more-->


<h2>工具准备</h2>

<p>需要的工具如下：</p>

<ul>
<li><p><a href="http://www.python.org/">Python</a>（版本是2.7.3，自带一个简单的IDE）</p></li>
<li><p>数值运算库<a href="http://sourceforge.net/projects/numpy/files/NumPy/">numpy</a>，matplotlib依赖这个库</p></li>
<li><p>类似matlab的图形库<a href="http://matplotlib.sourceforge.net/">matplotlib</a></p></li>
<li><p>文本编辑工具<a href="http://gnuwin32.sourceforge.net/packages/sed.htm">sed</a></p></li>
</ul>


<p>有了这些工具，还需要了解一些正则表达式，可参看<a href="http://shanewfx.github.com/blog/2012/09/01/learning-regex/">这里</a>。</p>

<p>当然，基本的Python脚本编程功底的需要的。网上关于Python的教程有很多，我参考了如下几篇：</p>

<ul>
<li><p><a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/">简明Python教程</a></p></li>
<li><p><a href="http://docs.linuxtone.org/ebooks/Python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.pdf">Python学习笔记</a></p></li>
<li><p><a href="http://woodpecker.org.cn/diveintopython/">Dive into Python</a></p></li>
</ul>


<p>从这几天学习的效果来看，Python应该算是比较容易上手的语言。</p>

<p>可能是Python里面的语法和概念和C++有相似之处，所以很多语法基本只有了解一下怎么写就可以了。</p>

<p>其中，列表、序列、字典这几种Python中的数据结构要用熟，另外，在Python中不需要再关心数据的类型，直接用就好了。</p>

<p>终于体会到一点“学好C++之后再学其他语言要相对容易”的感觉。</p>

<p>看了上述的教程，现在写一些简单的脚本也是很容易的了。</p>

<h2>分析Log文件的过程</h2>

<ul>
<li>编写批处理文件，使用Sed命令从Log文件中提取出需要的数据，将所有匹配数据所在的行都打印出来，写并到其他的文件中</li>
</ul>


<p>参考下面的代码，其中，Sed命令中引号的内容为要匹配文本的正则表达式，正则表达式在两个斜杠之间，后面的p是打印的命令，Sed命令执行的结果被重定向到后面的文件中。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>del /f/s/q Video.txt
</span><span class='line'>del /f/s/q Audio.txt&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>del /f/s/q VideoRecv.txt
</span><span class='line'>del /f/s/q AudioRecv.txt&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>del /f/s/q videopts.txt
</span><span class='line'>del /f/s/q audiopts.txt&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sed -n "/Video.&lt;em>New Frame/p" tsmux.txt>>Video.txt
</span><span class='line'>sed -n "/Audio.&lt;/em>New Frame/p" tsmux.txt>>Audio.txt&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sed -n "/nType : ESTYPE_VIDEO/p" tsmux.txt>>VideoRecv.txt
</span><span class='line'>sed -n "/nType : ESTYPE_AUDIO/p" tsmux.txt>>AudioRecv.txt&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>sed -n "/origin pts: .&lt;em>, video/p" tsmux.txt>>videopts.txt
</span><span class='line'>sed -n "/origin pts: .&lt;/em>, audio/p" tsmux.txt>>audiopts.txt</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这个批处理的脚本要和要分析的Log文件放在同一文件夹下，这样双击执行脚本，文件夹中会多了5个文件，这几个文件就是我们下面Python脚本需要用到的。</p>

<ul>
<li>编写分析Log数据的Python脚本，该脚本运行后会以图形的方法显示出相关数据的分析结果</li>
</ul>


<p>下面这个例子要完成的功能就是前端输入PTS的总体趋势是否正确，有无明显跳变。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import re
</span><span class='line'>import matplotlib.pyplot as plt&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>print "analyse video input pts!..."&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>regex  = re.compile('video pts : (\d+)')
</span><span class='line'>regex1 = re.compile('audio pts : (\d+)')&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>video_index = []
</span><span class='line'>video_pts   = []&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>'''
</span><span class='line'>file = open("videopts.txt", "rb")
</span><span class='line'>log = file.readline()
</span><span class='line'>while log:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>found = regex.search(log)
</span><span class='line'>if found:
</span><span class='line'>    video_index.append(len(video_index))
</span><span class='line'>    video_pts.append(found.group(1))
</span><span class='line'>log = file.readline()
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>file.close()
</span><span class='line'>'''&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>file  = open("videopts.txt", "rb")
</span><span class='line'>log = file.read()
</span><span class='line'>file.close()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>m = regex.findall(log)
</span><span class='line'>if m:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print "video match success"
</span><span class='line'>for pts in m:
</span><span class='line'>    video_index.append(len(video_index))
</span><span class='line'>    video_pts.append(pts)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>else:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print "not match"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>audio_index = []
</span><span class='line'>audio_pts   = []&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>file1 = open("audiopts.txt", "rb")
</span><span class='line'>log1 = file1.read()
</span><span class='line'>file1.close()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>m1 = regex1.findall(log1)
</span><span class='line'>if m1:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print "audio match success"
</span><span class='line'>for pts1 in m1:
</span><span class='line'>    audio_index.append(len(audio_index))
</span><span class='line'>    audio_pts.append(pts1)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>else:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print "audio not match"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>print "begin to plot"&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>fig = plt.figure()
</span><span class='line'>video_pts_plot = fig.add_subplot(211)
</span><span class='line'>video_pts_plot.plot(video_index, video_pts, 'r')
</span><span class='line'>audio_pts_plot = fig.add_subplot(212)
</span><span class='line'>audio_pts_plot.plot(video_index, video_pts, 'b')
</span><span class='line'>plt.show()</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行这个Python脚本后，可看到输入的Video/Audio PTS以图形的方式被显示出来。</p>

<p><a href="http://www.flickr.com/photos/shanewfx/7919967470/" title="Flickr 上 shanewfx 的 python"><img src="http://farm9.staticflickr.com/8169/7919967470_a8847583ce.jpg" width="500" height="498" alt="python"></a></p>

<p>在这个例子中，我们可以看到要使用到Python的正则表达式库re，图形绘制库matplotlib，还需要了解python中文件的操作，列表的使用等。</p>

<p>具体的用法请google其他资料。</p>

<p>（完）</p>
]]></content>
  </entry>
  
</feed>
